// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["msgbus", "apps/bills/search/views", "controller/_base", "backbone", "typeahead"], function(msgBus, Views, AppController, Backbone, Typeahead) {
  var Controller, _ref;
  return Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller() {
      _ref = Controller.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Controller.prototype.initialize = function(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.entities = msgBus.reqres.request("menu:entities");
      this.layout = this.getLayoutView();
      this.listenTo(this.layout, "show", function() {
        _this.toggleRegion();
        _this.inputRegion();
        return _this.menuRegion();
      });
      this.listenTo(this.layout, "toggle:tile:view", function() {
        return msgBus.commands.execute("toggle:bills:region");
      });
      return this.show(this.layout);
    };

    Controller.prototype.menuRegion = function() {
      var _this = this;
      this.dropdown = this.getMenuView(this.entities);
      this.listenTo(this.dropdown, "filter:bills", function(data) {
        console.log(data);
        return msgBus.commands.execute("search:filter:bills", data);
      });
      return this.layout.menuRegion.show(this.dropdown);
    };

    Controller.prototype.inputRegion = function() {
      var autoComplete, mpTags, mps, parties, partyTags, ridingTags, ridings, subjectTags, _tags;
      this.inputBox = this.getInputView();
      this.layout.inputRegion.show(this.inputBox);
      mps = msgBus.reqres.request("mpTag:entities");
      _tags = msgBus.reqres.request("subjectTag:entities");
      ridings = msgBus.reqres.request("ridingTag:entities");
      parties = msgBus.reqres.request("partyTag:entities");
      mpTags = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace("mp"),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: $.map(mps, function(memberTag) {
          return {
            mp: memberTag
          };
        })
      });
      subjectTags = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace("tags"),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: $.map(_tags, function(tag) {
          return {
            tags: tag
          };
        })
      });
      ridingTags = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace("riding"),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: $.map(ridings, function(ridingTag) {
          return {
            riding: ridingTag
          };
        })
      });
      partyTags = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace("party"),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        local: $.map(parties, function(partyTag) {
          return {
            party: partyTag
          };
        })
      });
      mpTags.initialize();
      subjectTags.initialize();
      ridingTags.initialize();
      partyTags.initialize();
      autoComplete = this.inputBox.$("#autoComplete");
      autoComplete.typeahead({
        'hint': true,
        'highlight': true,
        'minLength': 1
      }, {
        'name': "mpTags",
        'displayKey': "mp",
        'source': mpTags.ttAdapter(),
        'templates': {
          header: '<h3 class="">Members of Parliament</h3>'
        }
      }, {
        'name': "subjectTags",
        'displayKey': "tags",
        'source': subjectTags.ttAdapter(),
        'templates': {
          header: '<h3 class="">Issues</h3>'
        },
        'name': "ridingTags",
        'displayKey': "riding",
        'source': ridingTags.ttAdapter(),
        'templates': {
          header: '<h3 class="">Riding</h3>'
        },
        'name': "partyTags",
        'displayKey': "party",
        'source': partyTags.ttAdapter(),
        'templates': {
          header: '<h3 class="">Parties</h3>'
        }
      });
      return autoComplete.on("typeahead:selected", function(e, data, dataset) {
        console.log(data);
        if (dataset === "mpTags") {
          return msgBus.commands.execute("show:mp:profile", data);
        } else {
          return msgBus.commands.execute("search:filter:bills", data);
        }
      });
    };

    Controller.prototype.toggleRegion = function() {
      this.tileToggle = this.getToggleView();
      return this.layout.toggleRegion.show(this.tileToggle);
    };

    Controller.prototype.getLayoutView = function() {
      return new Views.Layout;
    };

    Controller.prototype.getToggleView = function() {
      return new Views.ToggleView;
    };

    Controller.prototype.getInputView = function() {
      return new Views.InputView;
    };

    Controller.prototype.getMenuView = function(collection) {
      return new Views.MenuView({
        collection: collection
      });
    };

    return Controller;

  })(AppController);
});
