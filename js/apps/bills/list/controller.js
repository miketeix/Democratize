// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["msgbus", "apps/bills/list/views", "controller/_base", "backbone", "obscura", "royalslider", "underscore"], function(msgBus, Views, AppController, Backbone, Obscura, royalSlider, _) {
  var Controller, _ref;
  return Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller() {
      _ref = Controller.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Controller.prototype.initialize = function(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      console.log("options", options);
      this.isMpPage = options.isMpPage;
      this.entities = msgBus.reqres.request("bill:entities");
      this.filtered = new Obscura(this.entities);
      this.startSlide = 0;
      msgBus.commands.setHandler("toggle:bills:region", function(tileIndex) {
        if (tileIndex == null) {
          tileIndex = 0;
        }
        _this.startSlide = tileIndex;
        return _this.toggleBillsRegion();
      });
      msgBus.commands.setHandler("search:filter:bills", function(data) {
        return _this.refreshFilter(data);
      });
      this.layout = this.getLayoutView();
      this.listenTo(this.layout, "show", function() {
        console.log("isMpPage", _this.isMpPage);
        if (_this.isMpPage) {
          return _this.tileRegion();
        } else {
          _this.searchRegion();
          return _this.slideRegion();
        }
      });
      return this.show(this.layout);
    };

    Controller.prototype.getLayoutView = function() {
      return new Views.Layout;
    };

    Controller.prototype.slideRegion = function() {
      var sliderView;
      sliderView = this.getSliderView(this.filtered);
      window.sliderView = sliderView;
      this.layout.billsRegion.show(sliderView);
      return sliderView.slider.updateSliderSize();
    };

    Controller.prototype.tileRegion = function() {
      var tileView;
      tileView = this.getTileView(this.filtered);
      return this.layout.billsRegion.show(tileView);
    };

    Controller.prototype.toggleBillsRegion = function() {
      if (this.layout.billsRegion.currentView instanceof Views.SliderView) {
        return this.tileRegion();
      } else {
        return this.slideRegion();
      }
    };

    Controller.prototype.searchRegion = function() {
      return msgBus.commands.execute("show:search", this.layout.searchRegion);
    };

    Controller.prototype.getTileView = function(collection) {
      return new Views.TileView({
        collection: collection
      });
    };

    Controller.prototype.getSliderView = function(collection) {
      return new Views.SliderView({
        collection: collection,
        startSlide: this.startSlide
      });
    };

    Controller.prototype.partyLookup = function(partyName) {
      switch (partyName) {
        case "Conservative Party of Canada":
          return "cpc";
        case "Liberal Party of Canada":
          return "lpc";
        case "New Democrat Party":
          return "ndp";
        case "Green Party of Canada":
          return "gpc";
        case "Bloc Quebecois":
          return "bq";
      }
    };

    Controller.prototype.refreshFilter = function(data) {
      var filterKey, incomingData, key;
      $('#panes').royalSlider('destroy').empty();
      incomingData = data;
      filterKey;
      for (key in data) {
        filterKey = key;
      }
      switch (filterKey) {
        case "party":
          return this.filtered.filterBy('party', {
            party: this.partyLookup(data.party)
          });
        case "filter":
          switch (data.filter) {
            case "all":
              return this.filtered.resetFilters();
            case "newest":
              return this.filtered.sortBy('introduced');
            case "popular":
              return console.log("popular");
            case "random":
              return console.log("random");
          }
          break;
        case "mp":
          return msgBus.commands.execute("show:mp:profile");
        case "tags":
          return this.filtered.filterBy('tags', function(model) {
            return _.some(model.get('tags'), function(obj) {
              return obj.en === incomingData.tags;
            });
          });
        case "riding":
          return this.filtered.filterBy('riding', {
            riding: data.riding
          });
      }
    };

    return Controller;

  })(AppController);
});
